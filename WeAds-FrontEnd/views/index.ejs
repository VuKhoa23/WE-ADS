<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>WeAds</title>
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
  <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">

  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>

  <link rel="stylesheet" href="/css/style.css" />
  <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

  <script src="https://kit.fontawesome.com/8f0e5e6d04.js" crossorigin="anonymous"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: monospace;
    }

    #map {
      position: absolute;
      top: 10vh;
      bottom: 0;
      width: 70%;
    }
  </style>
</head>

<body>

  <select class="form-select m-3 w-25 " id="typeFilter">
    <option value="-1" selected>Tất cả</option>
    <option value="0">Chưa quy hoạch</option>
    <option value="1">Đã quy hoạch</option>
    <option value="2">Các điểm đã báo cáo</option>
  </select>
  <div id="map">
    <div id="geocoder" class="geocoder"></div>
  </div>

  <%- include('./modal.ejs') %>

  <div id="notification-parent">
    <div id="notification-container" class="overflow-y-scroll "></div>
  </div>

  <script src="/js/htmlComponent.js"></script>
  <script src="/js/index.js"></script>
  <!-- const places -->
  <!-- <script src="/js/geojson.js"></script> -->
  <!-- ------------ -->
  <script>
    if (window.localStorage.getItem('reports') === null) {
      window.localStorage.setItem('reports', JSON.stringify({
        reports: []
      }))
    }
    const reports = JSON.parse(window.localStorage.getItem('reports'))

    let geojson = null
    async function getData() {
      const response = await fetch("http://localhost:3000/weads/place/geojson")
      geojson = await response.json()
    }

    async function checkReport() {
      for (place of geojson.features) {
        place.properties.isReport = 0
      }

      for (report of reports.reports) {
        if (report.adId === null) {
          for (place of geojson.features) {
            if (place.properties.placeId === report.placeId) {
              place.properties.isReport = 1
            }
          }
        } else {
          for (place of geojson.features) {
            for (ad of place.properties.ads) {
              if (report.adId = ad.adId) {
                place.properties.isReport = 1
              }
            }
          }
        }
      }
    }


    $(document).ready(async function () {
      await getData();
      await checkReport();
      mapboxgl.accessToken = "<%= API_KEY %>";
      const map = new mapboxgl.Map({
        container: "map",
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: "mapbox://styles/mapbox/streets-v12",
        center: [106.7222035, 10.794952],
        zoom: 13,
      });

      // add markers to map
      geojson.features.forEach(async (place, index) => {
        lng = place.geometry.coordinates[0]
        lat = place.geometry.coordinates[1]
        const response = await fetch(
          `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?country=vn&access_token=${mapboxgl.accessToken}`
        );
        const result = await response.json();

        const name = result.features[0].text;
        let address = result.features[0].place_name;
        address = address.replace(name + ", ", "")

        const el = document.createElement("div");
        if (place.properties.adPlanned === true) {
          el.className = "planned-marker";
        }
        else {
          el.className = "un-planned-marker";
        }

        el.addEventListener("click", (e) => {
          e.stopPropagation();
          const div = document.createElement("div")
          let isReported = 0
          for (report of reports.reports) {
            if (report.adId === null) {
              if (place.properties.placeId === report.placeId) {
                isReported = 1
              }
            }
            console.log(isReported)
          }
          div.innerHTML = infoAlert(name, address, index, place.properties.placeId, isReported)
          notiContainer.prepend(div);
        }, false);
        // make a marker for each feature and add to the map


        const marker = new mapboxgl.Marker(el)
          .setLngLat(place.geometry.coordinates)
          .setPopup(new mapboxgl.Popup().setHTML(popUp(address, place.properties.adType, place.properties.adPlanned)))
          .addTo(map)

        const markerDiv = marker.getElement();

        markerDiv.addEventListener("mouseenter", () => marker.togglePopup());
        markerDiv.addEventListener("mouseleave", () => marker.togglePopup());
      });

      // locate the user
      map.addControl(
        new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true,
          },
          // When active the map will receive updates to the device's location as it changes.
          trackUserLocation: true,
          // Draw an arrow next to the location dot to indicate which direction the device is heading.
          showUserHeading: true,
        })
      );

      map.on("load", () => {

        map.addSource('data', {
          type: 'geojson',
          // Point to GeoJSON data. This example visualizes all M1.0+ data
          // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
          data: geojson,
          cluster: true,
          clusterMaxZoom: 14, // Max zoom to cluster points on
          clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });


        // add style as symbol

        map.addLayer({
          id: 'point',
          type: 'circle',
          source: 'data',
          "paint": {
            "circle-radius": 10,
            'circle-color': [
              'case',
              ["==", ['to-number', ['get', 'isReport']], 1],
              "#ccf502",
              ["==", ['to-number', ['get', 'adPlanned']], 1],
              "#11780a",
              '#ba0606'
            ],
          },
        })

        // green
        // red 

        const filterElem = document.getElementById('typeFilter');

        filterElem.onchange = () => {
          console.log(geojson)
          const pubType = filterElem.value;
          if (pubType == -1) {
            const newGeoJSON = { ...geojson };
            map.getSource('data').setData(newGeoJSON);
          }
          else if (pubType == 0 || pubType == 1) {
            const newGeoJSON = { ...geojson };
            newGeoJSON.features = geojson.features.filter(feature => feature.properties.adPlanned == pubType);
            map.getSource('data').setData(newGeoJSON);
          } else {
            const newGeoJSON = { ...geojson };
            newGeoJSON.features = geojson.features.filter(feature => feature.properties.isReport == 1);
            map.getSource('data').setData(newGeoJSON);
          }
        };

        // markers layer
        map.addLayer({
          id: 'clusters',
          type: 'circle',
          source: 'data',
          filter: ['has', 'point_count'],
          paint: {
            // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
            // with three steps to implement three types of circles:
            //   * Blue, 20px circles when point count is less than 100
            //   * Yellow, 30px circles when point count is between 100 and 750
            //   * Pink, 40px circles when point count is greater than or equal to 750
            'circle-color': [
              'step',
              ['get', 'point_count'],
              '#51bbd6',
              100,
              '#f1f075',
              750,
              '#f28cb1'
            ],
            'circle-radius': [
              'step',
              ['get', 'point_count'],
              20,
              100,
              30,
              750,
              40
            ]
          }
        });

        map.addLayer({
          id: 'cluster-count',
          type: 'symbol',
          source: 'data',
          filter: ['has', 'point_count'],
          layout: {
            'text-field': ['get', 'point_count_abbreviated'],
            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
            'text-size': 12
          }
        });

        map.addLayer({
          id: 'unclustered-point',
          type: 'circle',
          source: 'data',
          filter: ['!', ['has', 'point_count']],
          paint: {
            'circle-color': '#11b4da',
            'circle-radius': 4,
            'circle-stroke-width': 1,
            'circle-stroke-color': '#fff'
          }
        });
        // ----------------------------

        map.on('click', 'clusters', (e) => {
          e.clickOnLayer = true;
          const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
          });
          const clusterId = features[0].properties.cluster_id;
          map.getSource('data').getClusterExpansionZoom(
            clusterId,
            (err, zoom) => {
              if (err) return;

              map.easeTo({
                center: features[0].geometry.coordinates,
                zoom: zoom
              });
            }
          );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', (e) => {
          e.clickOnLayer = true;
          const coordinates = e.features[0].geometry.coordinates.slice();
          // Ensure that if the map is zoomed out such that
          // multiple copies of the feature are visible, the
          // popup appears over the copy being pointed to.
          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
          }
        });

        map.on('click', 'cluster-count', (e) => {
          e.clickOnLayer = true;
        });

        map.on("click", async function (e) {
          if (e.clickOnLayer) {
            return;
          }
          const coordinates = e.lngLat;
          console.log(coordinates);

          const response = await fetch(
            `https://api.mapbox.com/geocoding/v5/mapbox.places/${coordinates.lng},${coordinates.lat}.json?country=vn&access_token=${mapboxgl.accessToken}`
          );
          const result = await response.json();
          const name = result.features[0].text;
          let address = result.features[0].place_name;
          address = address.replace(name + ", ", "")
          const ward = result.features[0].context[0].text
          const district = result.features[0].context[2].text

          const div = document.createElement("div")
          div.innerHTML = warnAlert(name, address, ward, district, coordinates)
          notiContainer.prepend(div);
        });

        map.on('mouseenter', 'clusters', () => {
          map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', () => {
          map.getCanvas().style.cursor = '';
        });
      })

      // Add the control to the map.
      const geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl,
        countries: "vn",
      });
      document.getElementById("geocoder").appendChild(geocoder.onAdd(map));
    })


    // map onclick event
    let notiContainer = document.getElementById("notification-container");
    console.log(reports)
    function populateDataToModal(place, address, index, adNum, planned) {
      let isReported = 0
      for (report of reports.reports) {
        if (report.adId !== null) {
          if (geojson.features[index].properties.ads[adNum].adId === report.adId) {
            isReported = 1
          }
        }
      }
      // set report href
      if (isReported) {
        $("#report-link").attr("href", "/weads/report/" + geojson.features[index].properties.placeId + "/"
          + geojson.features[index].properties.ads[adNum].adId)
        $("#view-link").css("display", "none")
        $("#report-link").css("display", "block")
      } else {
        $("#view-link").attr("href", "/weads/view-report/" + geojson.features[index].properties.placeId + "/"
          + geojson.features[index].properties.ads[adNum].adId)
        $("#report-link").css("display", "none")
        $("#view-link").css("display", "block")
      }

      //
      let indicator = document.getElementById("carousel-indicators-id");
      indicator.innerHTML = "";
      indicator.innerHTML += '<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>'
      for (i = 0; i < place.adImages.length - 1; i++) {
        indicator.innerHTML += `<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="${i + 1}" aria-label="Slide ${i + 2}"></button>`
      }
      let inner = document.getElementById("carousel-inner-id");
      inner.innerHTML = "";
      inner.innerHTML += `
      <div class="carousel-item active">
        <img src="${place.adImages[0].url}" alt="..." class="m-auto d-block w-75">
      </div>
      `
      for (i = 0; i < place.adImages.length - 1; i++) {
        inner.innerHTML += `
      <div class="carousel-item">
        <img src="${place.adImages[i + 1].url}" alt="..." class="m-auto d-block w-75">
      </div>
      `
      }

      $("#modal-header").html(place.adName + " - QC số " + adNum)
      $("#modal-address").html("Địa chỉ: " + address)
      $("#modal-scale").html("Kích thước: " + place.adScale)
      $("#modal-type").html("Loại: " + place.adType)
      if (planned == 1) {
        $("#modal-planned").html("Đã quy hoạch")
      }
      else {
        $("#modal-planned").html("Chưa quy hoạch")
      }
    }

    let adNum = 0

    async function showModal(index) {
      adNum = 0;
      lng = geojson.features[index].geometry.coordinates[0]
      lat = geojson.features[index].geometry.coordinates[1]
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?country=vn&access_token=${mapboxgl.accessToken}`
      );
      const result = await response.json();
      const name = result.features[0].text;
      let address = result.features[0].place_name;
      address = address.replace(name + ", ", "")

      if (geojson.features[index].properties.ads.length == 0) {
        $("#no-ads-modal").modal("show")
      }
      else if (geojson.features[index].properties.ads.length > 1) {
        $("#next-ad-btn").css("display", "block")
        $("#next-ad-btn").off("click")
        $("#next-ad-btn").on("click", function () {
          adNum++
          if (adNum == geojson.features[index].properties.ads.length) {
            adNum = 0
          }
          populateDataToModal(geojson.features[index].properties.ads[adNum], address, index, adNum, geojson.features[index].properties.adPlanned)
        })
      } else {
        $("#next-ad-btn").css("display", "none")
      }

      populateDataToModal(geojson.features[index].properties.ads[adNum], address, index, adNum, geojson.features[index].properties.adPlanned)
      $("#ads-modal").modal("show");
    }
  </script>


</body>

</html>